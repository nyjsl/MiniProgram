import * as tslib_1 from "tslib";
import { HTTPTransport, HTTP_UNAUTHORIZED, ErrorCode, ErrorName, ErrorType, BasementClientError, assert, } from '@ant-basement/core';
import { MiniProgramHTTPRequestEncoder, MiniProgramHTTPResponseDecoder, } from './codec';
var MiniProgramHTTPTransport = (function (_super) {
    tslib_1.__extends(MiniProgramHTTPTransport, _super);
    function MiniProgramHTTPTransport(endpoint, library) {
        var _this = _super.call(this, endpoint, library) || this;
        _this.scope = 'auth_user';
        assert(library.uploadFile, 'missing miniprogram execution environment');
        assert(library.getAuthCode, 'missing miniprogram execution environment');
        assert(library.canIUse, 'missing miniprogram execution environment');
        _this.uploadFile = _this.wrap(library.uploadFile);
        _this.getAuthCode = _this.wrap(library.getAuthCode);
        var httpRequest = library.canIUse('request') ? library.request : library.httpRequest;
        assert(httpRequest, 'missing miniprogram execution environment');
        _this.httpRequest = _this.wrap(httpRequest);
        return _this;
    }
    MiniProgramHTTPTransport.prototype.getEncoder = function () {
        return new MiniProgramHTTPRequestEncoder(this.endpoint, this.spaceId);
    };
    MiniProgramHTTPTransport.prototype.request = function (encoder, retried) {
        if (retried === void 0) { retried = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cloned, token, encoded, decoded, e_1, isUnAuthorized;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cloned = encoder.clone();
                        return [4, this.getAccessToken()];
                    case 1:
                        token = _a.sent();
                        encoder.setBodyField({
                            token: token,
                        });
                        encoder.sign(this.appSecret);
                        encoder.setBaseHeaders({
                            'Content-Type': 'application/json',
                            'x-basement-token': token,
                        });
                        if (this.ua) {
                            encoder.setBaseHeaders({
                                'x-serverless-ua': this.ua,
                            });
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 8]);
                        encoded = encoder.encodeAsHTTPRequestObject({
                            timeout: this.timeout,
                            dataType: 'json',
                        });
                        this.logger.info('request data');
                        this.logger.info(JSON.stringify(encoded, null, 2));
                        return [4, this.httpRequest(encoded)];
                    case 3:
                        decoded = _a.sent();
                        return [2, decoded];
                    case 4:
                        e_1 = _a.sent();
                        isUnAuthorized = e_1.error.code === 'GATEWAY_INVALID_TOKEN'
                            || e_1.error.code === 'InvalidParameter.InvalidToken' || e_1.status === HTTP_UNAUTHORIZED;
                        if (!isUnAuthorized) return [3, 7];
                        if (retried) {
                            this.logger.error('auth error', e_1);
                            throw new BasementClientError(ErrorName.UNAUTHORIZED_ERROR, ErrorCode.AUTHENTICATION_FAILED, ErrorType.COMMON_ERROR, 'authentication failed');
                        }
                        return [4, this.getAccessToken(true)];
                    case 5:
                        _a.sent();
                        return [4, this.request(cloned, true)];
                    case 6: return [2, _a.sent()];
                    case 7:
                        if (e_1.error) {
                            this.logger.error('IDE error', e_1.message);
                            this.logger.error(e_1);
                            throw e_1.error;
                        }
                        this.logger.error('Unknown error', e_1.message);
                        this.logger.error(e_1);
                        throw e_1;
                    case 8: return [2];
                }
            });
        });
    };
    MiniProgramHTTPTransport.prototype.authorize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this.pendingRequest = this
                    .getAuthCode({ scopes: this.scope })
                    .then(function (res) {
                    _this.logger.info('Request authcode ' + (res.body.authCode ? 'success' : 'failed'));
                    return res.body.authCode;
                })
                    .then(function (authCode) {
                    var encoder = _this.getEncoder();
                    encoder.setBodyField({
                        method: 'serverless.auth.user.authorize',
                        params: {
                            authProvider: 'alipay_openapi',
                            clientIdentifier: _this.appId,
                            authCode: authCode,
                        },
                    });
                    encoder.sign(_this.appSecret);
                    encoder.setBaseHeaders({ 'Content-Type': 'application/json' });
                    if (_this.ua) {
                        encoder.setBaseHeaders({
                            'x-serverless-ua': _this.ua,
                        });
                    }
                    var encoded = encoder.encodeAsHTTPRequestObject({
                        timeout: _this.timeout,
                        dataType: 'json',
                    });
                    return _this.httpRequest(encoded);
                })
                    .then(function (res) {
                    _this.logger.info('Request accessToken ' + (res.body.success ? 'success' : 'failed'));
                    if (res.body && res.body.result) {
                        _this.accessToken = res.body.result.accessToken;
                    }
                    _this.pendingRequest = null;
                    return Promise.resolve(_this.accessToken);
                });
                return [2, this.pendingRequest];
            });
        });
    };
    MiniProgramHTTPTransport.prototype.getAccessToken = function (refresh) {
        if (refresh === void 0) { refresh = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (this.pendingRequest) {
                    this.logger.info('getAccessToken: reuse');
                    return [2, this.pendingRequest];
                }
                if (refresh || !this.accessToken) {
                    this.logger.info('getAccessToken: start');
                    return [2, this.authorize()];
                }
                return [2, this.accessToken];
            });
        });
    };
    MiniProgramHTTPTransport.prototype.upload = function (host, formData, fileName, filePath, header) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.info('upload with params');
                        this.logger.info(JSON.stringify(formData, null, 2));
                        return [4, this.uploadFile({
                                url: host,
                                formData: formData,
                                fileName: fileName,
                                filePath: filePath,
                                fileType: 'image',
                                header: tslib_1.__assign({}, header, { 'X-OSS-server-side-encrpytion': 'AES256' }),
                            })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    MiniProgramHTTPTransport.prototype.wrap = function (myMethod) {
        var _this = this;
        return function (args) {
            return new Promise(function (resolve, reject) {
                myMethod(Object.assign(args, {
                    complete: function (res) {
                        if (res === void 0) { res = {}; }
                        _this.logger.info('completed request');
                        _this.logger.info(JSON.stringify(res, null, 2));
                        var decoder = new MiniProgramHTTPResponseDecoder();
                        var response = decoder.decode(res);
                        if (response.error) {
                            return reject(response);
                        }
                        return resolve(response);
                    },
                }));
            });
        };
    };
    return MiniProgramHTTPTransport;
}(HTTPTransport));
export { MiniProgramHTTPTransport };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLGFBQWEsRUFHYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsbUJBQW1CLEVBRW5CLE1BQU0sR0FFUCxNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFHTCw2QkFBNkIsRUFDN0IsOEJBQThCLEdBQy9CLE1BQU0sU0FBUyxDQUFDO0FBUWpCO0lBQThDLG9EQUFhO0lBUXpELGtDQUNFLFFBQWdCLEVBQ2hCLE9BQVk7UUFGZCxZQUlFLGtCQUFNLFFBQVEsRUFBRSxPQUFPLENBQUMsU0FXekI7UUF0QlMsV0FBSyxHQUFlLFdBQVcsQ0FBQztRQWF4QyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7UUFDekUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsMkNBQTJDLENBQUMsQ0FBQztRQUNyRSxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbEQsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN2RixNQUFNLENBQUMsV0FBVyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7UUFDakUsS0FBSSxDQUFDLFdBQVcsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLFdB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