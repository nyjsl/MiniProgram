(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@ant-basement/core", "@ant-basement/services", "./transport", "mime/lite"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require("tslib");
    const core_1 = require("@ant-basement/core");
    const services_1 = require("@ant-basement/services");
    const transport_1 = require("./transport");
    const lite_1 = tslib_1.__importDefault(require("mime/lite"));
    class MiniProgramFileService extends services_1.FileService {
        async uploadFile(options) {
            core_1.assert(options.filePath && typeof options.filePath === 'string', 'missing options.filePath');
            const relativePath = options.filePath.replace(/(.*):\/\//, '');
            const extension = relativePath.split('.').pop();
            core_1.assert(core_1.WHITELIST_EXTENSIONS.includes(extension.toLowerCase()), `目前不支持 ${extension} 类型文件`);
            const meta = Object.keys(options.meta || {}).reduce((accu, key) => {
                accu[`x-oss-meta-${key}`] = options.meta[key];
                return accu;
            }, {});
            const headers = options.headers ? core_1.OSSUploadHeaderList.reduce((accu, key) => {
                const fieldName = key.replace(/\-[A-Z]/g, match => match[1]).replace(/^[A-Z]/, match => match.toLowerCase());
                if (options.headers.hasOwnProperty(fieldName))
                    accu[key] = options.headers[fieldName];
                return accu;
            }, {}) : {};
            const uploadRes = await this.getOSSUploadOptionsFromPath(relativePath, options.path, options.fileSize);
            if (uploadRes.error) {
                throw new core_1.BasementClientError(core_1.ErrorName.INTERFACE_ERROR, core_1.ErrorCode.INTERFACE_RESPONSE_FAILED, core_1.ErrorType.COMMON_ERROR, uploadRes.error.message);
            }
            const uploadOptions = core_1.OSSUploadResponseFormat(uploadRes.result);
            await this.uploadFileToOSS(options, uploadOptions, headers, meta);
            await this.reportOSSUpload(uploadOptions.id, lite_1.default.getType(options.extension));
            return {
                fileUrl: `https://${uploadOptions.host}/${uploadOptions.key}`,
                filePath: uploadOptions.key,
            };
        }
        async uploadFileToOSS(fileUploadOptions, ossUploadOptions, headers, meta) {
            const options = ['key', 'policy', 'Signature', 'OSSAccessKeyId'].reduce((accu, key) => {
                accu[key] = ossUploadOptions[key];
                return accu;
            }, ossUploadOptions);
            const uploadHeader = {};
            if (fileUploadOptions.extension) {
                const contentType = lite_1.default.getType(fileUploadOptions.extension);
                if (!contentType) {
                    throw new core_1.BasementClientError(core_1.ErrorName.VALIDATION_ERROR, core_1.ErrorCode.VALIDATION_FAILED, core_1.ErrorType.COMMON_ERROR, '文件扩展错误，无法解析正确的 MIME');
                }
                uploadHeader['Content-Type'] = contentType;
            }
            headers['Cache-Control'] = 'max-age=2592000';
            await this.transport.upload(`https://${ossUploadOptions.host}`, Object.assign({ success_action_status: 200 }, headers, meta, options), 'file', fileUploadOptions.filePath, uploadHeader);
        }
    }
    class Basement extends core_1.Basement {
        constructor(appGlobal, options) {
            super({ ...options, httpClient: appGlobal, httpTransport: transport_1.MiniProgramHTTPTransport });
            core_1.assert(options.clientSecret, 'client secret is required');
            if (Object.keys(options).length === 0) {
                console.error('云服务配置不存在');
                return;
            }
            if (!options.appId) {
                appGlobal.showToast({ content: '请检查是否选择应用' });
                return;
            }
            if (!options.spaceId) {
                appGlobal.showToast({ content: '请检查是否选择云服务' });
                return;
            }
            this.db = new services_1.DbService(this.transport);
            this.user = new services_1.AuthService(this.transport);
            this.file = new MiniProgramFileService(this.transport);
            this.function = new services_1.FunctionService(this.transport);
            this.appService = new services_1.AppService(this.transport);
            if (appGlobal.remoteLog) {
                appGlobal.remoteLog({
                    type: 'behavior',
                    seedId: 'basementVersion',
                    param1: this.version,
                    bizType: 'basement',
                    logLevel: 1,
                    actionId: 'event',
                });
            }
        }
        get version() {
            return VERSION;
        }
        get ua() {
            return `pkg_name:@ant-basement/miniprogram-sdk;ver:${this.version};`;
        }
        createTransport(options) {
            super.createTransport(options);
            this.transport.setAppSecret(options.clientSecret).setUA(this.ua);
        }
    }
    exports.Basement = Basement;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFzZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQUEsNkNBYzRCO0lBQzVCLHFEQUVnQztJQUNoQywyQ0FBdUQ7SUFDdkQsNkRBQTZCO0lBRTdCLE1BQU0sc0JBQXVCLFNBQVEsc0JBQVc7UUFNdkMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUEwQjtZQUNoRCxhQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFLDBCQUEwQixDQUFDLENBQUM7WUFFN0YsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDaEQsYUFBTSxDQUFDLDJCQUFvQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxTQUFTLFNBQVMsT0FBTyxDQUFDLENBQUM7WUFFMUYsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDaEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QyxPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNQLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBCQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVB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