(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@ant-basement/core", "./codec"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const core_1 = require("@ant-basement/core");
    const codec_1 = require("./codec");
    class MiniProgramHTTPTransport extends core_1.HTTPTransport {
        constructor(endpoint, library) {
            super(endpoint, library);
            this.scope = 'auth_user';
            core_1.assert(library.uploadFile, 'missing miniprogram execution environment');
            core_1.assert(library.getAuthCode, 'missing miniprogram execution environment');
            core_1.assert(library.canIUse, 'missing miniprogram execution environment');
            this.uploadFile = this.wrap(library.uploadFile);
            this.getAuthCode = this.wrap(library.getAuthCode);
            const httpRequest = library.canIUse('request') ? library.request : library.httpRequest;
            core_1.assert(httpRequest, 'missing miniprogram execution environment');
            this.httpRequest = this.wrap(httpRequest);
        }
        getEncoder() {
            return new codec_1.MiniProgramHTTPRequestEncoder(this.endpoint, this.spaceId);
        }
        async request(encoder, retried = false) {
            const cloned = encoder.clone();
            const token = await this.getAccessToken();
            encoder.setBodyField({
                token,
            });
            encoder.sign(this.appSecret);
            encoder.setBaseHeaders({
                'Content-Type': 'application/json',
                'x-basement-token': token,
            });
            if (this.ua) {
                encoder.setBaseHeaders({
                    'x-serverless-ua': this.ua,
                });
            }
            try {
                const encoded = encoder.encodeAsHTTPRequestObject({
                    timeout: this.timeout,
                    dataType: 'json',
                });
                this.logger.info('request data');
                this.logger.info(JSON.stringify(encoded, null, 2));
                const decoded = await this.httpRequest(encoded);
                return decoded;
            }
            catch (e) {
                const isUnAuthorized = e.error.code === 'GATEWAY_INVALID_TOKEN'
                    || e.error.code === 'InvalidParameter.InvalidToken' || e.status === core_1.HTTP_UNAUTHORIZED;
                if (isUnAuthorized) {
                    if (retried) {
                        this.logger.error('auth error', e);
                        throw new core_1.BasementClientError(core_1.ErrorName.UNAUTHORIZED_ERROR, core_1.ErrorCode.AUTHENTICATION_FAILED, core_1.ErrorType.COMMON_ERROR, 'authentication failed');
                    }
                    await this.getAccessToken(true);
                    return await this.request(cloned, true);
                }
                if (e.error) {
                    this.logger.error('IDE error', e.message);
                    this.logger.error(e);
                    throw e.error;
                }
                this.logger.error('Unknown error', e.message);
                this.logger.error(e);
                throw e;
            }
        }
        async authorize() {
            this.pendingRequest = this
                .getAuthCode({ scopes: this.scope })
                .then((res) => {
                this.logger.info('Request authcode ' + (res.body.authCode ? 'success' : 'failed'));
                return res.body.authCode;
            })
                .then((authCode) => {
                const encoder = this.getEncoder();
                encoder.setBodyField({
                    method: 'serverless.auth.user.authorize',
                    params: {
                        authProvider: 'alipay_openapi',
                        clientIdentifier: this.appId,
                        authCode,
                    },
                });
                encoder.sign(this.appSecret);
                encoder.setBaseHeaders({ 'Content-Type': 'application/json' });
                if (this.ua) {
                    encoder.setBaseHeaders({
                        'x-serverless-ua': this.ua,
                    });
                }
                const encoded = encoder.encodeAsHTTPRequestObject({
                    timeout: this.timeout,
                    dataType: 'json',
                });
                return this.httpRequest(encoded);
            })
                .then((res) => {
                this.logger.info('Request accessToken ' + (res.body.success ? 'success' : 'failed'));
                if (res.body && res.body.result) {
                    this.accessToken = res.body.result.accessToken;
                }
                this.pendingRequest = null;
                return Promise.resolve(this.accessToken);
            });
            return this.pendingRequest;
        }
        async getAccessToken(refresh = false) {
            if (this.pendingRequest) {
                this.logger.info('getAccessToken: reuse');
                return this.pendingRequest;
            }
            if (refresh || !this.accessToken) {
                this.logger.info('getAccessToken: start');
                return this.authorize();
            }
            return this.accessToken;
        }
        async upload(host, formData, fileName, filePath, header) {
            this.logger.info('upload with params');
            this.logger.info(JSON.stringify(formData, null, 2));
            return await this.uploadFile({
                url: host,
                formData,
                fileName,
                filePath,
                fileType: 'image',
                header: {
                    ...header,
                    'X-OSS-server-side-encrpytion': 'AES256',
                },
            });
        }
        wrap(myMethod) {
            return args => {
                return new Promise((resolve, reject) => {
                    myMethod(Object.assign(args, {
                        complete: (res = {}) => {
                            this.logger.info('completed request');
                            this.logger.info(JSON.stringify(res, null, 2));
                            const decoder = new codec_1.MiniProgramHTTPResponseDecoder();
                            const response = decoder.decode(res);
                            if (response.error) {
                                return reject(response);
                            }
                            return resolve(response);
                        },
                    }));
                });
            };
        }
    }
    exports.MiniProgramHTTPTransport = MiniProgramHTTPTransport;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBLDZDQWE0QjtJQUM1QixtQ0FLaUI7SUFRakIsTUFBYSx3QkFBeUIsU0FBUSxvQkFBYTtRQVF6RCxZQUNFLFFBQWdCLEVBQ2hCLE9BQVk7WUFFWixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBWGpCLFVBQUssR0FBZSxXQUFXLENBQUM7WUFheEMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsMkNBQTJDLENBQUMsQ0FBQztZQUN4RSxhQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO1lBQ3pFLGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWxELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDdkYsYUFBTSxDQUFDLFdBQVcsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBTU0sVUFBVTtZQUNmLE9BQU8sSUFBSSxxQ0FBNkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RSxDQUFDO1FBT00s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